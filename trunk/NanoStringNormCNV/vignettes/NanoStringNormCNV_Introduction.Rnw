%\VignetteIndexEntry{Introduction to NanoStringNormCNV}
%\VignetteDepends{vsn,googleVis,gdata}
%\VignetteKeywords{CNV Analysis}
%\VignettePackage{NanoStringNormCNV}

%------------------------------------------------------------
% setup document
%------------------------------------------------------------

\documentclass{article}
\usepackage[margin=2cm,nohead]{geometry}
\usepackage{color}
\usepackage{cite}
\usepackage{flafter}
\usepackage{afterpage}
\usepackage{caption}
\definecolor{darkblue}{rgb}{0.0,0.0,0.75}
\definecolor{ns.green}{rgb}{0.0,0.0,0.75}
\definecolor{ns.orange}{rgb}{0.0,0.0,0.75}
\usepackage[%
baseurl={http://cran.r-project.org/},%
pdftitle={Introduction to analyzing NanoString nCounter data using the NanoStringNormCNV package},%
pdfauthor={Dorota Sendorek},%
pdfsubject={NanoStringNormCNV},%
pdfkeywords={NanoString},%
pagebackref,bookmarks,colorlinks,linkcolor=darkblue,citecolor=darkblue,%
pagecolor=darkblue,raiselinks,plainpages,pdftex]{hyperref}

\SweaveOpts{keep.source=TRUE,eps=FALSE,include=FALSE,width=5,height=5} 

\newcommand{\Robject}[1]{\texttt{#1}}
\newcommand{\Rpackage}[1]{\textit{#1}}
\newcommand{\Rclass}[1]{\textit{#1}}
\newcommand{\Rfunction}[1]{{\small\texttt{#1}}}

%------------------------------------------------------------
% start document
%------------------------------------------------------------

\begin{document}
%----------------------------------------------------------------------------------------
\title{Introduction to analyzing NanoString nCounter data using the NanoStringNormCNV package}
\author{Dorota Sendorek}
%----------------------------------------------------------------------------------------
\maketitle
\tableofcontents
%\listoffigures
\clearpage
%------------------------------------------------------------
% set R defaults
%------------------------------------------------------------

<<setup, echo=FALSE,results=hide>>=
options(width=100, signif=3, digits=3)
set.seed(0xdada)

## To create bitmap versions of plots with many dots, circumventing
##   Sweave's fig=TRUE mechanism...
##   (pdfs are too large)
openBitmap = function(nm, rows=1, cols=1) {
  png(paste("NSN-", nm, ".png", sep=""), 
       width=600*cols, height=700*rows, pointsize=14)
  par(mfrow=c(rows, cols), cex=2)
}
@

%------------------------------------------------------------
\section{Getting started}\label{sec:started}
%------------------------------------------------------------ 
NanoStringNormCNV is a suite of tools used to perform quality control, pre-processing, copy number calling and visualization on NanoString nCounter DNA data. NanoString is a medium-throughput platform which first gained popularity through gene expression quantification and, now, has extended its functionality to CNV detection in genomic DNA. NanoString holds a number of advantages over traditional assays and they include its ability to handle lower quality samples, measure DNA without necessary amplification, and produce an absolute nucleic acid count. Given this, the applications of this technology are wide-ranging, from validation to clinical.
\\ \\
NanoStringNormCNV has been created to aid the user in identifying the optimal data analysis techniques for their dataset, as well as providing a NanoString CNV analysis foundation for the community to expand on. Additionally, NanoStringNormCNV is an extension of the NanoStringNorm package, allowing the utilization and expansion of those pre-processing techniques.
\\ \\This vignette details the workflow of NanoStringNormCNV. Basic steps include loading the data, running quality control metrics, pre-processing the raw data, calling CNVs, and evaluating and visualizing results. Small example datasets are provided for learning purposes.

<<load.package, results = hide, echo = FALSE >>=
require("NanoStringNormCNV");
@

%------------------------------------------------------------
\section{Setting Up Data}\label{sec:setup}
%------------------------------------------------------------

Raw NanoString data is often provided in RCC files. If so, one can import the files using \Rfunction{NanoStringNorm::read.markup.RCC} or \Rfunction{NanoStringNorm::read.xls.RCC}. 
\\ \\
Otherwise, read in the raw text file and ensure the data frame is formatted correctly for NanoStringNormCNV usage. The first three columns must be 'CodeClass' (probe type), 'Name' (unique probe name), and 'Accession' (name of corresponding gene or genomic segment). The following columns must hold sample raw counts and are named using sample IDs. An example dataset for NanoString raw counts is provided here.

<<eg.load.raw.data>>=
require('NanoStringNormCNV');

# load raw count example dataset
data("NanoString");
print(NanoString[1:6, 1:6]);
@

The sample annotation file (csv or tab-delimited) is loaded separately. It is recommended to use \Rfunction{load.phenodata} as this function checks that the information and formatting meets package requirements for downstream processing. See "PhenoData" man page for details on formatting requirements.

<<eg.load.annotation>>=
# load annotation example dataset
data("PhenoData");

# optionally, read in annotation file (same information as above) 
PhenoData <- load.phenodata(
	fname = system.file("extdata", "PhenoData.tsv", package = "NanoStringNormCNV"),
	separator = "tab"
	);

print(head(PhenoData));
@

%------------------------------------------------------------
\section{Quality Control Metrics}\label{sec:qc}
%------------------------------------------------------------

There are three quality controls metrics available each utilizing one of the three control probe types included with NanoString CNV CodeSets.

\subsection{Positive controls}

Positive control probe counts are correlated with expected concentrations (obtained from NanoString guidelines). Samples with R squared values that fall below 0.95 are flagged. Diagnostic plots can also be generated to visualize results.

<<eg.positive.control.qc, eval = FALSE>>=
# quality control using positive controls
r.squared <- positive.control.qc(raw.data = NanoString);

# plot R squared values
make.positive.control.plot(correlations = r.squared, covs = PhenoData);
@

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.6\textwidth]{positive-control-correlations_zoomed-in.png}  
	\captionof{figure}{R squared values across all samples. All samples are well above the 0.95 cutoff.}
\end{center}

\vspace{5mm}

\subsection{Restriction fragmentation controls}

Restriction fragmentation controls are used to determine whether DNA denaturation and digestion has occured. This is metric applies to AluI digested samples. Probes that contain AluI restriction sites (A+B) are compared to those that do not (C+D). Complete denaturation is signified by mean probe counts from C+D of over 200. Complete restriction enzyme digestion is signified by a C+D/A+B ratio of more than 10. Samples with low counts or low ratios are identified and visualized.

<<eg.restriction.fragmentation.control.qc, eval = FALSE>>=
# checking AluI-digested samples only
excl.samples <- PhenoData$SampleID[PhenoData$Fragmentation != "AluI"];
probe.ratios <- restriction.fragmentation.qc(
	raw.data = NanoString[, ! names(NanoString) %in% excl.samples]
	);
@

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.75\textwidth]{restriction-fragmentation-ratios_multiplot.png}
	\captionof{figure}{Top plot displays restriction fragmentation probe ratios. All sample ratios are well above the minimum of 10 (as denoted by the dashed line). The bottom plot displays raw restriction fragmentation probe counts. Yellow bars are not visible indicating that enzyme digestion was successful.}
\end{center}

\vspace{5mm}

\subsection{Invariant controls}

The final quality control step involves plotting invariant control probes. Samples found to have mean invariant counts of less than 100 are considered low quality. This is especially problematic in normal reference samples as it will result in calling exaggerated copy numbers.

<<eg.invariant.control.qc, eval = FALSE>>=
# plotting invariant probes
make.invariant.probe.plot(
	inv.probe.counts = NanoString[NanoString$CodeClass == 'Invariant', -(1:3)],
	tissue.type = PhenoData
	);
@

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.6\textwidth]{all-invariant-probe-counts_scatterplot.png}  
	\captionof{figure}{Invariant counts per probe across all samples. Counts that fall under 100, the recommended minimum, are in red.}
\end{center}

\begin{center}
	\includegraphics[width=0.6\textwidth]{low-invariant-probe-counts_barplot.png}  
	\captionof{figure}{The number of probes with low counts per sample. Red bars for normal reference samples and black bars for tumour samples. Low counts are most problematic in reference samples when calling copy number downstream.}
\end{center}

\vspace{5mm}

If there are low count invariant probes, two diagnostic plots are produced. One of these is a barplot showing samples with invariant probe counts of less than 100.

In this example, samples CPCG0266B.M1 and CPCG0248B.M2 are found to have an unusually large number of low count probes. These poor quality reference samples are removed from both the raw count and annotation datasets.

<<eg.remove.low.qual>>=
low.quality <- c('CPCG0266B.M1', 'CPCG0248B.M2');
NanoString  <- NanoString[, !names(NanoString) %in% low.quality];
PhenoData   <- PhenoData[!PhenoData$SampleID %in% low.quality,];
@

Any sample removal must be accounted for where it affects other samples. Since CPCG0248B.M2 was the matched normal for tumour sample CPCG0248F1, the reference ID for CPCG0248F1 must be set to 'missing'. Additionally, the 'HasReplicate' column must be updated since both removed samples had replicates.    

<<eg.update.data>>==
# update matched normal and replicate information, as necessary
PhenoData[PhenoData$SampleID == 'CPCG0248F1',]$ReferenceID <- 'missing';
PhenoData[PhenoData$SampleID %in% c('CPCG0266B.M2', 'CPCG0248B.M1'),]$HasReplicate <- 0;
@

%------------------------------------------------------------
\section{Normalization Methods}\label{sec:normalization}
%------------------------------------------------------------

Most of the normalization options available in NanoStringNormCNV are accessed fromls NanoStringNorm. These are briefly outlined below but for full details please see the NanoStringNorm vignette 'Introduction to analyzing NanoString nCounter data using the NanoStringNorm package'. 
\\ \\
To maximize flexbility, cartridges can either be processed independently or combined (recommended). Two wrapper functions are provided for this purpose: \Rfunction{normalize.global} and \Rfunction{normalize.per.chip}.
\\ \\
The first option is code count correction ('cc'). Positive controls are used to minimize any lane-to-lane variation. Probe counts can be summarized using summation ('sum') or by taking the geometric mean ('geo.mean'). To skip, specify 'none'.
\\ \\
The second option is background correction ('bc'). Negative controls are used to account for non-specific binding to probes. Probe counts can be summarized by taking the mean ('mean'), the maximum ('max'), or the mean plus two standard deviations ('mean.2sd'). To skip, specify 'none'.
\\ \\
The third option is sample content correction ('sc'). Housekeeping genes are used to normalize for any genomic DNA input (e.g. due to pipetting fluctuations). NanoStringNorm requires probes of code class 'Housekeeping' to perform this step and will throw out an error if they are not provided. A number of options are available: 'housekeeping.geo.mean', 'total.sum', 'top.geo.mean', 'low.cv.geo.mean'. To skip, specify 'none'.
\\ \\
Please note that in the provided dataset, housekeeping genes are either a) 'Endogenous' probes that were found to show little variability in counts across data or b) simulated counts created by adding noise to existing housekeeping genes (these can be identified by their name prefix 'SIM'). Code class of these genes must be 'Housekeeping'.
\\ \\
A new option not implemented in NanoStringNorm is invariant probe normalization. This can be run directly with \Rfunction{invariant.probe.norm} or in combination with the other techniques listed using one of the wrapper functions. This is the method outlined in NanoString guidelines for CNV analysis and, therefore, recommended here for sample content correction.
\\ \\
The final option is for additional normalization methods, alternative to those proposed by NanoString, including 'vsn', 'rank.normal', and 'quantile'. To skip, specify 'none'.

<<eg.norm1>>=
# example 1
# perform invariant probe normalization only --cartridges combined
NanoString.norm <- normalize.global(
	raw.data = NanoString,
	cc = 'none',
	bc = 'none',
	sc = 'none',
	oth = 'none',
	do.rcc.inv = TRUE,
	covs = NA,
	phenodata = PhenoData
	);
@

<<eg.norm2>>=
# example 2
# perform invariant probe normalization only --cartridges individually
NanoString.norm <- normalize.per.chip(
	raw.data = NanoString,
	cc = 'none',
	bc = 'none',
	sc = 'none',
	oth = 'none',
	do.rcc.inv = TRUE,
	covs = NA,
	phenodata = PhenoData
	);
@

<<eg.norm3>>=
# example 3
# include covariates for sample cartridge and sample type 
# must be binary as these are passed directly to NanoStringNorm 'traits'
covs <- as.data.frame(matrix(
	1,
	nrow = nrow(PhenoData),
	ncol = length(unique(PhenoData$Cartridge)),
	dimnames = list(
		PhenoData$SampleID,
		paste0("Cartridge", unique(PhenoData$Cartridge))
		)
	));

for (n in 1:nrow(PhenoData)) {
	covs[n, which(unique(PhenoData$Cartridge) == PhenoData$Cartridge[n])] <- 2;
	}

covs$Type <- ifelse(PhenoData$Type == 'Reference', 1, 2);

NanoString.norm <- normalize.global(
	raw.data = NanoString,
	cc = 'none',
	bc = 'none',
	sc = 'none',
	oth = 'none',
	do.rcc.inv = TRUE,
	covs = covs,
	phenodata = PhenoData
	);
@

<<eg.norm4>>=
# same as above but per chip
NanoString.norm <- normalize.per.chip(
	raw.data = NanoString,
	cc = 'none',
	bc = 'none',
	sc = 'none',
	oth = 'none',
	do.rcc.inv = TRUE,
	covs = covs,
	phenodata = PhenoData
	);
@

Post-normalization, one may choose to collapse probes to get a single count value per gene/genome segment. Probes with matching 'Accession' values are collapsed by taking their mean count. Unique probe 'Name' values are substituted with 'Accession' values.

<<eg.collapse.genes>>=
NanoString.norm.col <- collapse.genes(normalized.data = NanoString.norm);
print(NanoString.norm.col[1:6, 1:6]);
@

%------------------------------------------------------------
\section{Calling CNAs}\label{sec:cnas}
%------------------------------------------------------------

Two functions are provided to perform CNA calling on normalized data: \Rfunction{call.cnas.with.matched.normals} and \Rfunction{call.cnas.with.pooled.normals}. Tumour-normal ratios are calculated and converted to categorical CNA calls (0 to 4) by rounding. Ratios are rounded using 4 thresholds that represent a homozygous deletion, a heterozygous deletion, a single-copy gain and a multi-copy gain. Thresholds can be set using one of the three methods that are currently implemented:
\\ \\
a) thresholds derived from NanoString manual recommendations (0.4, 1.5, 2.5, 3.5)
b) thresholds calculated using the (cohort median) minimum and maximum normal sample counts (min, min + SD, max - SD, max). This is only available for \Rfunction{call.cnas.pooled.normals})
c) by applying the kernel-density approach (sample-specific if using \Rfunction{call.cnas.with.matched.normals} and cohort-specific if using \Rfunction{call.cnas.with.pooled.normals})
\\ \\
Calling can be performed on sex chromosome segments provided that sample sex information is provided in sample annotation.

<<call.cnas.matched.ref>>=
# Option 1: call using matched normal reference
cnas <- call.cnas.with.matched.normals(
	normalized.data = NanoString.norm,
	phenodata = PhenoData,
	per.chip = FALSE,
	call.method = 2,
	kd.values = c(0.99, 0.87, 0.89, 0.96),
	use.sex.info = TRUE
	);
@

<<call.cnas.pooled.ref>>=
# Option 2: call using a pooled normals reference
cnas <- call.cnas.with.pooled.normals(
	normalized.data = NanoString.norm,
	phenodata = PhenoData,
	per.chip = FALSE,
	call.method = 3,
	use.sex.info = TRUE
	);
# Option 3: call using a pooled normals reference
cnas <- call.cnas.with.pooled.normals(
	normalized.data = NanoString.norm,
	phenodata = PhenoData,
	per.chip = FALSE,
	call.method = 1,
	use.sex.info = TRUE
	);
@

%------------------------------------------------------------
\section{Evaluating Results}\label{sec:eval}
%------------------------------------------------------------
To determine the optimal schema for one's dataset, it is recommended to run and compare several (if not all) pre-processing parameter combinations. Several functions have been added to facilitate this comparison.
\\ \\
Information from replicate samples can be used to determine the concordance of categorical CNA calls or variance in the continuous tumour-normal ratio space.

<<eg.eval.reps>>=
# if technical replicates are available
evaluation <- evaluate.replicates(
	phenodata = PhenoData,
	normalized.data = NanoString.norm,
	cna.rounded = cnas$rounded
	);
@

Another option is to calculate adjusted Rand indexes (ARI) which measure to what extent data clusters according to some feature (e.g. tissue type). This can be performed on either continuous (i.e. normalized counts) or discrete data (i.e. copy number calls).

<<eg.ari1>>=
# how well does the data cluster around the patients from which samples were obtained
patient.ari <- get.ari(
	data.to.cluster = evaluation$cna.calls,
	feature = PhenoData[match(colnames(evaluation$cna.calls), PhenoData$SampleID),]$Patient,
	is.discrete = TRUE
	);
@

<<eg.ari2>>=
# how much does the data cluster around the cartridges on which the samples were processed
# log values, if appropriate
if (all(unlist(NanoString.norm) >= 0)) {
    count.data <- log10(NanoString.norm[, -c(1:3)] + 1);
} else {
    count.data <- NanoString.norm[, -c(1:3)];
    }

cartridge.ari <- get.ari(
    data.to.cluster = count.data,
    feature = PhenoData$Cartridge[match(colnames(NanoString.norm[, -(1:3)]), PhenoData$SampleID)],
    is.discrete = FALSE
    );
@

%------------------------------------------------------------
\section{Visualization}\label{sec:vis}
%------------------------------------------------------------

A number of plotting functions are provided. Diagnostic plots have been described previously (see section 'Quality Control Metrics'). Normalized and copy number data can also be visualized. The plotting wrapper function \Rfunction{visualize.results} will create figures using all available plotting functions.

<<eg.vis1, eval = FALSE>>=
# plot normalized NanoString counts
make.counts.heatmap(
	nano.counts = NanoString.norm[, -(1:3)],
	fname.stem = 'normalized',
	covs.rows = PhenoData[, c('SampleID', 'Type', 'Cartridge')],
	covs.cols = NanoString[, c('Name', 'CodeClass')]
	);

# plot raw NanoString counts
# make sure raw count data frame has gene names for rownames!
NanoString.formatted <- NanoString[, -(1:3)];
rownames(NanoString.formatted) <- NanoString$Name;

make.counts.heatmap(
	nano.counts = NanoString.formatted,
	fname.stem = 'raw',
	covs.rows = PhenoData[, c('SampleID', 'Type', 'Cartridge')],
	covs.cols = NanoString[, c('Name', 'CodeClass')]
	);
@

<<eg.vis2, eval = FALSE>>=
# plot rounded copy number calls
make.cna.heatmap(
	nano.cnas = cnas$rounded,
	fname.stem = 'round',
	covs.rows = PhenoData[, c('SampleID', 'Type', 'Cartridge')],
	covs.cols = NanoString[, c('Name', 'CodeClass')],
	rounded = TRUE
	);

# plot raw (not rounded) copy number calls
make.cna.heatmap(
	nano.cnas = cnas$raw,
	fname.stem = 'raw',
	covs.rows = PhenoData[, c('SampleID', 'Type', 'Cartridge')],
	covs.cols = NanoString[, c('Name', 'CodeClass')],
	rounded = FALSE
	);
@

<<eg.vis3, eval = FALSE>>=
# plot copy number call density for rounded values
# two plots: per gene and per sample
make.cna.densities.plots(
	nano.cnas = cnas$rounded
	);
@

<<eg.vis4, eval = FALSE>>=
# plot raw NanoString count correlations
make.sample.correlations.heatmap(
	nano.counts = NanoString.formatted,
	covs = PhenoData[, c('SampleID', 'Cartridge', 'Type')]
	);
@

<<eg.vis5, eval = FALSE>>=
# plot all results using wrapper function
visualize.results(
    raw.data = NanoString,
    normalized.data = NanoString.norm,
    phenodata = PhenoData,
    cna.rounded = cnas$rounded,
    cna.raw = cnas$raw,
    replicate.eval = evaluation,
    max.cn = 5
    );
@

\clearpage

\begin{center}
	\includegraphics[width=0.5\textwidth]{raw-logged_counts-heatmap.png}
	\captionof{figure}{Raw NanoString counts}
\end{center}

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.5\textwidth]{normalized-logged_counts-heatmap.png}
	\captionof{figure}{Normalized NanoString counts}
\end{center}

\clearpage

\begin{center}
	\includegraphics[width=0.5\textwidth]{raw-count_inter-sample-correlation-heatmap.png}
	\captionof{figure}{Raw NanoString count inter-sample correlations}
\end{center}

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.5\textwidth]{norm-count_inter-sample-correlation-heatmap.png}
	\captionof{figure}{Normalized NanoString count inter-sample correlations}
\end{center}

\clearpage

\begin{center}
	\includegraphics[width=0.5\textwidth]{raw-cna-calls_cna-heatmap.png}
	\captionof{figure}{Raw CNA calls}
\end{center}

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.5\textwidth]{rounded-cna-calls_cna-heatmap.png}
	\captionof{figure}{Rounded CNA calls}
\end{center}

\clearpage

\begin{figure}[h]
	\centering
	\includegraphics[width=0.4\textwidth]{raw-cna-calls_gene-densityplot.png}
	\includegraphics[width=0.4\textwidth]{rounded-cna-calls_gene-densityplot.png}
	\caption{Raw (left) and rounded (right) CNA call densities, per gene}
\end{figure}

\vspace{5mm}

\begin{figure}[h]
	\centering
	\includegraphics[width=0.4\textwidth]{raw-cna-calls_sample-densityplot.png}
	\includegraphics[width=0.4\textwidth]{rounded-cna-calls_sample-densityplot.png}
	\caption{Raw (left) and rounded (right) CNA call densities, per sample}
\end{figure}

\clearpage

\begin{center}
	\includegraphics[width=0.5\textwidth]{replicate_raw-logged_counts-heatmap.png}
	\captionof{figure}{Raw counts for replicate samples}
\end{center}

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.5\textwidth]{replicate_norm-logged_counts-heatmap.png}
	\captionof{figure}{Normalized counts for replicate samples}
\end{center}

\clearpage

\begin{center}
	\includegraphics[width=0.5\textwidth]{replicate_norm-count_inter-sample-correlation-heatmap.png}
	\captionof{figure}{Normalized count inter-sample correlations for replicate samples}
\end{center}

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.5\textwidth]{replicate_tumour-only_norm-count_inter-sample-correlation-heatmap.png}
	\captionof{figure}{Normalized count inter-sample correlations for replicate samples, tumour only}
\end{center}

\clearpage

\begin{center}
	\includegraphics[width=0.5\textwidth]{replicate_cna-calls_cna-heatmap.png}
	\captionof{figure}{CNA calls for replicate samples}
\end{center}

\vspace{5mm}

\begin{center}
	\includegraphics[width=0.5\textwidth]{replicate_cna-concordance_counts-heatmap.png}
	\captionof{figure}{Copy number concordance across replicate samples}
\end{center}

\end{document}
